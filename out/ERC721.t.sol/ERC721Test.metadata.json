{
  "compiler": {
    "version": "0.8.22+commit.4fc1097e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "name": "log",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "log_address",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "val",
            "type": "uint256[]"
          }
        ],
        "name": "log_array",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "int256[]",
            "name": "val",
            "type": "int256[]"
          }
        ],
        "name": "log_array",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address[]",
            "name": "val",
            "type": "address[]"
          }
        ],
        "name": "log_array",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "name": "log_bytes",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "name": "log_bytes32",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "name": "log_int",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "val",
            "type": "address"
          }
        ],
        "name": "log_named_address",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "val",
            "type": "uint256[]"
          }
        ],
        "name": "log_named_array",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "int256[]",
            "name": "val",
            "type": "int256[]"
          }
        ],
        "name": "log_named_array",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "address[]",
            "name": "val",
            "type": "address[]"
          }
        ],
        "name": "log_named_array",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "val",
            "type": "bytes"
          }
        ],
        "name": "log_named_bytes",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "val",
            "type": "bytes32"
          }
        ],
        "name": "log_named_bytes32",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "int256",
            "name": "val",
            "type": "int256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "decimals",
            "type": "uint256"
          }
        ],
        "name": "log_named_decimal_int",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "val",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "decimals",
            "type": "uint256"
          }
        ],
        "name": "log_named_decimal_uint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "int256",
            "name": "val",
            "type": "int256"
          }
        ],
        "name": "log_named_int",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "val",
            "type": "string"
          }
        ],
        "name": "log_named_string",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "val",
            "type": "uint256"
          }
        ],
        "name": "log_named_uint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "name": "log_string",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "log_uint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "name": "logs",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "IS_TEST",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "data",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "excludeArtifacts",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "excludedArtifacts_",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "excludeContracts",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "excludedContracts_",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "excludeSenders",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "excludedSenders_",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "failed",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "from",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "id",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "invariant_ERC721Metadata",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_operator",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_from",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "onERC721Received",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "operator",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "setUp",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "targetArtifactSelectors",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes4[]",
                "name": "selectors",
                "type": "bytes4[]"
              }
            ],
            "internalType": "struct StdInvariant.FuzzSelector[]",
            "name": "targetedArtifactSelectors_",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "targetArtifacts",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "targetedArtifacts_",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "targetContracts",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "targetedContracts_",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "targetInterfaces",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "string[]",
                "name": "artifacts",
                "type": "string[]"
              }
            ],
            "internalType": "struct StdInvariant.FuzzInterface[]",
            "name": "targetedInterfaces_",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "targetSelectors",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes4[]",
                "name": "selectors",
                "type": "bytes4[]"
              }
            ],
            "internalType": "struct StdInvariant.FuzzSelector[]",
            "name": "targetedSelectors_",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "targetSenders",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "targetedSenders_",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testAccounts",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testApprove",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testApproveAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testApproveBurn",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testBurn",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testERC721LazyMintLazyBuy",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailApproveUnAuthorized",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailApproveUnMinted",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailBalanceOfZeroAddress",
        "outputs": [],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailBurnUnminted",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailDoubleBurn",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailDoubleMint",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailLazyBuyReplay",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailLazyMintReplay",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailMintToZero",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailOwnerOfUnminted",
        "outputs": [],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeMintToERC721RecipientWithWrongReturnData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeMintToERC721RecipientWithWrongReturnDataWithData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeMintToNonERC721Recipient",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeMintToNonERC721RecipientWithData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeMintToRevertingERC721Recipient",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeMintToRevertingERC721RecipientWithData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeTransferFromToERC721RecipientWithWrongReturnData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeTransferFromToERC721RecipientWithWrongReturnDataWithData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeTransferFromToNonERC721Recipient",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeTransferFromToNonERC721RecipientWithData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeTransferFromToRevertingERC721Recipient",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailSafeTransferFromToRevertingERC721RecipientWithData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailTransferFromNotOwner",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailTransferFromToZero",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailTransferFromUnOwned",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailTransferFromWrongFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailVoidVoucherLazyBuy",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testFailVoidVoucherLazyMint",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testLazyBuyFromEOA2EOA",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testLazyMintFromEOA2EOA",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testMint",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testSafeMintToERC721Recipient",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testSafeMintToERC721RecipientWithData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testSafeTransferFromToEOA",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testSafeTransferFromToERC721Recipient",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testSafeTransferFromToERC721RecipientWithData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testSupportsInterface",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testTransferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testTransferFromApproveAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "testTransferFromSelf",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "testFailLazyMintReplay()": {
          "details": "test fails because the tokenURI is required to be unique by the ERC721Sovereign implementation, in order to prevent vouchers from being reused"
        },
        "testFailVoidVoucherLazyBuy()": {
          "details": "test calling voidVoucher() external function from signer, although any account with MINTER_ROLE could call it if the call to lazyMint fails, the test passes, i.e. the voucher is voided"
        },
        "testFailVoidVoucherLazyMint()": {
          "details": "test calling voidVoucher() external function from signer, although any account with MINTER_ROLE could call it if the call to lazyMint fails, the test passes, i.e. the voucher is voided"
        },
        "testLazyBuyFromEOA2EOA()": {
          "details": "buying tokenId 0 (minted via mint() during setup) from minter to collector Voucher is signed by EOA and the token is safe transferred to EOA"
        },
        "testLazyMintFromEOA2EOA()": {
          "details": "minting new tokenId and buying it via lazyMint Voucher is signed by EOA and the token is minted to EOA"
        }
      },
      "stateVariables": {
        "ANVIL_MNEMONIC": {
          "details": "strings and arrays cannot be immutable"
        },
        "_anon": {
          "details": "the anon is the account for testing unauthorised operations"
        },
        "_collector": {
          "details": "the collector is the account for testing buying operations using ETH, or for secondary sales"
        },
        "_curator": {
          "details": "the curator is the account that deploys the CuratedFactory and grants the MINTER_ROLE to this contract"
        },
        "_deployer": {
          "details": "the deployer is the account that deploys the CuratedFactory and grants the CURATOR_ROLE to the curator"
        },
        "_feesRecipient": {
          "details": "the feesRecipient is the account for testing fees collected by lazy minting and buying in the context of ERC721Sovereign, which may be set to a different account than the (default) minter/deployer"
        },
        "_minter": {
          "details": "the minter is the account for testing lazy mint signatures from an EOA, normal minting is done from the testing contract (this)"
        },
        "_operator": {
          "details": "the operator is the account for testing operator approval and transfers"
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "test/ERC721.t.sol": "ERC721Test"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "inliner": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "peephole": true,
        "simpleCounterForLoopUncheckedIncrement": true,
        "yul": true,
        "yulDetails": {
          "optimizerSteps": "dhfoDgvulfnTUtnIf:fDnTOcmu",
          "stackAllocation": true
        }
      },
      "runs": 4194304
    },
    "remappings": [
      ":ds-test/=lib/solmate/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin/=lib/openzeppelin-contracts/contracts/",
      ":prb-test/=lib/prb-test/src/",
      ":solmate/=lib/solmate/src/",
      ":src/=contracts/",
      ":test/=test/"
    ],
    "viaIR": true
  },
  "sources": {
    "contracts/access/AccessControl.sol": {
      "keccak256": "0xcaf264cf4f9d26647567d0ce263af4ffd6d44e02369d0582ed589e9bbf29b52b",
      "license": "MIT",
      "urls": [
        "bzz-raw://be2cb37db3630c274b00dcf2ba92d486bec4e2b194d6b05bed2a3bdf93b23f7c",
        "dweb:/ipfs/QmSWu6r2kKuwnuEaqSD5LgwtHeGYPoKmqLiVCLC2SbmnP7"
      ]
    },
    "contracts/factory/CuratedFactory.sol": {
      "keccak256": "0x1389bbceb40a96deb89bcef20d2b70b7e09ca3e299dfa4556945690d3f5b7de0",
      "license": "MIT",
      "urls": [
        "bzz-raw://2e4227704838ed0300574692f1260b9b1fa0cbae6f0da01a416fb8d4925b535e",
        "dweb:/ipfs/QmNtUn9fxgf4PV5V4SKdzeo246yxccz2pSe69dSSwpc6qX"
      ]
    },
    "contracts/proxy/Clones.sol": {
      "keccak256": "0x81e4c8e99bf0e9833b0530e46ce391427c27bd2120e6cb77cf7424eca0ba47fa",
      "license": "MIT",
      "urls": [
        "bzz-raw://e83f71d45a8fd7a410eb523fe96f8604ada88d43657f2e3519377442c5e3e429",
        "dweb:/ipfs/QmY31k1oEUmLRvcGsTMLskHKt1DKS1J1fhc4uJhHcvw8Dp"
      ]
    },
    "contracts/token/ERC721/ERC721.sol": {
      "keccak256": "0x56ab5e1b6a8a1dead3589eee655576a9eed0c139663ff01917da5c10dbe62bbd",
      "license": "MIT",
      "urls": [
        "bzz-raw://6937ae4422ad911c7d15dcc35932928251286fd4fc68358c6cca9e83a77189c4",
        "dweb:/ipfs/QmYUh1fE114R1byhFMRg4UndQ3KAoyfYjpJi5ewqj1y1ma"
      ]
    },
    "contracts/token/ERC721/IERC721Receiver.sol": {
      "keccak256": "0xfa2d4e7ae4084ba16e2608caea4e2dfc0da8a8c253c291fd8678ef38470c4f74",
      "license": "MIT",
      "urls": [
        "bzz-raw://c1c752b7fd111af4b895b6b39e0cb7f2271203afcec1ea31a294e2f8a3149a83",
        "dweb:/ipfs/QmZGRRr84qBs2MJQcaudNgbaeCn8XtiicQqyuwD9yBe8h6"
      ]
    },
    "contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "keccak256": "0x8eb1424715f384ccbed760b96cf49c716a9f644d3161fb7eb7ec58d76861d9a6",
      "license": "MIT",
      "urls": [
        "bzz-raw://13fd4c6856abe659c029b27593765d01bb3e0a56728cade269712073d5862455",
        "dweb:/ipfs/QmYq68h1tJArzRjU2C8XLAap5dSiNEWFwhB4yyKVy2gbbR"
      ]
    },
    "contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "keccak256": "0xa05d54dc4a124da4f5f23bab5a493aacf5af88823d961a0840193c1a7b314d03",
      "license": "MIT",
      "urls": [
        "bzz-raw://96fc52ad89fbc209d82ac5d3880fc364798d3d62ae1e13ceac382385c38cdc44",
        "dweb:/ipfs/QmQBRn8BW5qVUhKAL83TTbVbaAdi6YKjSi6MFr8knnRTnP"
      ]
    },
    "contracts/token/ERC721/extensions/ERC721Metadata_URI.sol": {
      "keccak256": "0xbaa67b8cf04df765f33f7a9db95b6139bf74d9f019d983931c68a28ae4d76af3",
      "license": "MIT",
      "urls": [
        "bzz-raw://02ebd857c4b277bf6773f691d9ed8949e7ae5a42fffb024d3d3b0b144b721b41",
        "dweb:/ipfs/QmQZZEEuWMMxtbtahSAVrvm6JHpcDzrevFfmGXdfvHJtqc"
      ]
    },
    "contracts/token/ERC721/extensions/ERC721Royalties.sol": {
      "keccak256": "0x352420aa12deeec0d70654458f08ccb58f15105d12828018475aa580ff0f2a01",
      "license": "MIT",
      "urls": [
        "bzz-raw://4005b59019c9d7e8f06a6ae8cd1c1b618c5da59a1a92116cb69a3af8465f0306",
        "dweb:/ipfs/QmPYmSegaKLFKHC8QmDdzLTggvpiaJV5qxYLXpu3apqWbS"
      ]
    },
    "contracts/token/ERC721/presets/ERC721Sovereign.sol": {
      "keccak256": "0xca0d199125a948b5ca668e326da4d1d43e90e5e44574eca7ab7a8a7a4422f7d1",
      "license": "MIT",
      "urls": [
        "bzz-raw://728bfea4509d20066334d42cc0acb3bf9269d4a3e7581744264f83923e5ca5af",
        "dweb:/ipfs/QmR4Q8yL2dmGkWF5scPwpJEVbpcpD7BzST3TEBZcjiequJ"
      ]
    },
    "contracts/token/common/DecodeTokenURI.sol": {
      "keccak256": "0x94290c9d8b146ecdf51ef8d06abe343d5702616e47162ef116351c7495e84c02",
      "license": "MIT",
      "urls": [
        "bzz-raw://f2a10edf2fd35ae1e2565de1ef4cb89c44a16c4fe46ca56a4dcb457b0ebef4f5",
        "dweb:/ipfs/QmRwfsffDfkdHiHqfR9DddgY2AchvvQD2uezdfgPpHC5pr"
      ]
    },
    "contracts/token/common/ERC2981.sol": {
      "keccak256": "0x6984aefb2ce8c5637f7cdf8a352a78f9f87ed9ded599187c4ece8ff34cc231a1",
      "license": "MIT",
      "urls": [
        "bzz-raw://275d02a60d5e08f7e95c0d4cbd03fc23327cd1d391de4589cf25670fc671ed4f",
        "dweb:/ipfs/QmdgCGFNk4CCiyBrVcoYms9KR443wDK5LC2YkJm77twNy8"
      ]
    },
    "contracts/token/common/ERC712.sol": {
      "keccak256": "0xd005cb995658f3e2ef283112ad9be22b565c8a9a257332413b01ea4621d0e40f",
      "license": "MIT",
      "urls": [
        "bzz-raw://01aeca036a9f595fda0a27242ab2015d1e775bf2912a42830178b57b72af85dc",
        "dweb:/ipfs/QmUvCfi2eorsDBJbA5k4azZfhmo6F725XgvRu7x977myWj"
      ]
    },
    "contracts/utils/Address.sol": {
      "keccak256": "0x8cd846c2836ec70de0117b60b99fab3057f6d52f69757c42ee247e5b70de9227",
      "license": "MIT",
      "urls": [
        "bzz-raw://40d2ee6f3f83cea1b24f8d744b291bae16a16d1f14a0688c260df13bcd61938a",
        "dweb:/ipfs/QmZqRgDrR6r8D3tghbtYJSD5uTgiQf6od3PTmnjAEwGNJe"
      ]
    },
    "contracts/utils/cryptography/ECDSA.sol": {
      "keccak256": "0xb739e54bef5daa5d5be886a0533002bd2d1ea1ac32cfc6f0c94d015a4448d48f",
      "license": "MIT",
      "urls": [
        "bzz-raw://ccad4fcf7316d54f137ccc229915c4d7c2dc0f98c7c3f5465cb69d033a44c56b",
        "dweb:/ipfs/QmSnUcKVJ2FXXGHSoN8QGdokHMkSzyCxhg5sxxHEK5etHt"
      ]
    },
    "contracts/utils/cryptography/SignatureChecker.sol": {
      "keccak256": "0x28d76bd6179311148fca09a9c8544d9e29e2656522f22e4aed0793da0f512ba4",
      "license": "MIT",
      "urls": [
        "bzz-raw://93e152bfab6f8617537438b8b045aea9a0a3eb97edfbcf69cb6611c7e0609bbb",
        "dweb:/ipfs/QmSYx4fp6qX8Aob8nPbWzqXyxkgtxPtkuQJ8SeqwQGwVKj"
      ]
    },
    "lib/forge-std/src/Base.sol": {
      "keccak256": "0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c",
      "license": "MIT",
      "urls": [
        "bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224",
        "dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK"
      ]
    },
    "lib/forge-std/src/StdAssertions.sol": {
      "keccak256": "0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60",
      "license": "MIT",
      "urls": [
        "bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b",
        "dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL"
      ]
    },
    "lib/forge-std/src/StdChains.sol": {
      "keccak256": "0xdbb593a36db1fde25c398f38312cfedc5b39c4bad1c65c2f58b7515c4dd76be8",
      "license": "MIT",
      "urls": [
        "bzz-raw://afc49471af92a1fd12686e2757ad0cbeb5bfe3cc95b8b6b5a5a91af83a8bcfd1",
        "dweb:/ipfs/QmcAQ5WesfLBUChNGuRMGQsDYf44q35Ln7Xb3jmyQgdESU"
      ]
    },
    "lib/forge-std/src/StdCheats.sol": {
      "keccak256": "0xa0bac08b3d12d561fadf74c83c69f3ee54fe40e0c7766611766f6db70c202373",
      "license": "MIT",
      "urls": [
        "bzz-raw://292f1e61a3a60f9f4075d0b567f5123d159b0541b7787e4523597ab57331eb08",
        "dweb:/ipfs/QmatxDNPiYVtLap2nn4Hp3AxzkSzkdAQDirbc5QKCDfde5"
      ]
    },
    "lib/forge-std/src/StdError.sol": {
      "keccak256": "0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77",
      "license": "MIT",
      "urls": [
        "bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6",
        "dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj"
      ]
    },
    "lib/forge-std/src/StdInvariant.sol": {
      "keccak256": "0x67299bfacd77fddfa2a67b8e2b901e0e333618a4975fb94850b07475e51f6de6",
      "license": "MIT",
      "urls": [
        "bzz-raw://1b61121d310f4053ce344b345b4a9ccf43b059daf9097ec2647f594beaca896d",
        "dweb:/ipfs/QmZUCoTtXBM9zfAZVbj2dFPPnKaV1CSZzXE7zictyg3Gfz"
      ]
    },
    "lib/forge-std/src/StdJson.sol": {
      "keccak256": "0x8f914dbd016bd0e318fe2b8bd556fbc8256c7cddc24e3e4fcb9f3c1c1935592d",
      "license": "MIT",
      "urls": [
        "bzz-raw://19e704df493dde38323303b07d18cadfeb4dcadf1ddc2301add4aea9474fbb5e",
        "dweb:/ipfs/QmZasuGiLK8LHwWtvpqEBxUR6QFY6GdzLMTJ9q7CMf8PNZ"
      ]
    },
    "lib/forge-std/src/StdMath.sol": {
      "keccak256": "0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2",
      "license": "MIT",
      "urls": [
        "bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92",
        "dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC"
      ]
    },
    "lib/forge-std/src/StdStorage.sol": {
      "keccak256": "0x4298f3f4cedaedb07029820b1daad2c03af45379559392201f7bf3ec71105811",
      "license": "MIT",
      "urls": [
        "bzz-raw://6e062f36d8d1ae3c383ef8975757926eaa9c4de3a92b5f1fe2d12748bcd8db32",
        "dweb:/ipfs/QmcWkv3ia5Ew4DZNcudMNSTNXZ3W2QiXTZunRd44e9BT8z"
      ]
    },
    "lib/forge-std/src/StdStyle.sol": {
      "keccak256": "0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d",
      "license": "MIT",
      "urls": [
        "bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8",
        "dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK"
      ]
    },
    "lib/forge-std/src/StdUtils.sol": {
      "keccak256": "0x8758c42ba9d9e46868b796e2330ac239006ede07bd438a4b36dd6f2c47d27dc1",
      "license": "MIT",
      "urls": [
        "bzz-raw://11f5752e0187b1e3631b875efdbe05d45929d05f1c1717105a9115d0a6628140",
        "dweb:/ipfs/QmUKkx9jfsUvjyYBw45RvrW1hTFXDXi2Jv5tbHP86mnzpi"
      ]
    },
    "lib/forge-std/src/Test.sol": {
      "keccak256": "0x39b1729d5868c8e94ab8af16751eb500a17fe3870dc627d2b7ddcd5df18d7ad0",
      "license": "MIT",
      "urls": [
        "bzz-raw://1568c82aff125cc4b0fc168be9d67ac313f469a3c7405c5493caecaaaecfb765",
        "dweb:/ipfs/QmXByuZReJsdu1jDcxj1FcmpcUnzoBcqybn9kWgDAECWri"
      ]
    },
    "lib/forge-std/src/Vm.sol": {
      "keccak256": "0x039a59e16791fb3595615f1ad19d614cdb1f1e567ed3bfc1a35d97177387be68",
      "license": "MIT",
      "urls": [
        "bzz-raw://da3d0bfe99104664a3a053665578ad1277ea79e0704519d3b7ff98b3b7054155",
        "dweb:/ipfs/QmesLHpsvzvC6DoTFLdgNibRU5sfeNggYtyaRfA64t2PsD"
      ]
    },
    "lib/forge-std/src/console.sol": {
      "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
      "license": "MIT",
      "urls": [
        "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
        "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
      ]
    },
    "lib/forge-std/src/console2.sol": {
      "keccak256": "0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea",
      "license": "MIT",
      "urls": [
        "bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973",
        "dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF"
      ]
    },
    "lib/forge-std/src/interfaces/IMulticall3.sol": {
      "keccak256": "0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a",
      "license": "MIT",
      "urls": [
        "bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0",
        "dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2"
      ]
    },
    "lib/forge-std/src/safeconsole.sol": {
      "keccak256": "0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381",
      "license": "MIT",
      "urls": [
        "bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae",
        "dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq"
      ]
    },
    "lib/solmate/lib/ds-test/src/test.sol": {
      "keccak256": "0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54",
      "license": "GPL-3.0-or-later",
      "urls": [
        "bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5",
        "dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr"
      ]
    },
    "test/ERC721.t.sol": {
      "keccak256": "0xe723f0f02b0a815c747b56990a8ab7135c37fd26bcb1ccdc801738c1fa51fe6a",
      "license": "MIT",
      "urls": [
        "bzz-raw://234d19855809483b268a3e322d6d141ab16031efd50fe3f45d1e2d78fa26a244",
        "dweb:/ipfs/QmPkZDmdoyFTmomGyHmG7YMntC3wiwP1uGtTJZwudDAS1e"
      ]
    },
    "test/helpers/ERC721Validator.sol": {
      "keccak256": "0xdaf245a17492568bddf6c78564d34125e8d4bdcb508e2f8ca69dc2a9891d8a4e",
      "license": "MIT",
      "urls": [
        "bzz-raw://685fc5055ecf31b42e8685c0c7a1af92305e8d3439e8ec55ca4a1bf4f6d2a9aa",
        "dweb:/ipfs/QmcueaBqsx9UuUKcZLuEayRtDUATJ7ucsoByu462mzBfcT"
      ]
    },
    "test/helpers/Utils.sol": {
      "keccak256": "0x90ddd027675a09630986f2fc54883ef7c700eb22e1e66bd537095733e9d2c272",
      "license": "MIT",
      "urls": [
        "bzz-raw://d91cfc0c8447dd43fa91caa1458ee0cfa2efb2ec36f143fe148ed842aab68be5",
        "dweb:/ipfs/QmNkXRD5Qe3qkkt6JBfpqL4dXvxJo789iCFX6MK2myxQd5"
      ]
    },
    "test/interfaces/IAccessControl.sol": {
      "keccak256": "0x4444bc1aa877a50054f35aaee5e7a3916fca16783e8f433b2f8fb4342645769c",
      "license": "MIT",
      "urls": [
        "bzz-raw://97ba9f5c984038dc9f3d9eaf2a253ee26e3ad8d9265c1428c747850af8e6f3ea",
        "dweb:/ipfs/QmS9MJfGDgLYVq5sqwA6pdj9YkHhRn1ApbCdAysHUKFtNf"
      ]
    },
    "test/interfaces/IERC165.sol": {
      "keccak256": "0x24ea350ff0c875d3f6686038b099d6995eca1b4bce16a27104c8bb3f0bc09a10",
      "license": "MIT",
      "urls": [
        "bzz-raw://5b6e83fd5b3ed635e22efb32f1187ab78eba204d90a035edb83863d7ec365024",
        "dweb:/ipfs/QmSxEwuDXyHWivXL48dpLDCuxKro8HrAxXSfnv2pvfH8h1"
      ]
    },
    "test/interfaces/IERC721.sol": {
      "keccak256": "0x48c473e0d478fcabb87b573a98cc110c104af78ac23d9c95588c69b66a0972c3",
      "license": "MIT",
      "urls": [
        "bzz-raw://3ea4455945b0ae33417a35ad6a3b800b305304fa0f451c529255701b1caff6b8",
        "dweb:/ipfs/Qmb1yxDouFGGgnYVcodPSp8GcY31UiWLWZzXpgqWHskgm6"
      ]
    },
    "test/interfaces/IERC721Sovereign.sol": {
      "keccak256": "0x0a4c2759f3dc281f7a83ab713aed40f752f358bb716c88242fbaf5a1db37a262",
      "license": "MIT",
      "urls": [
        "bzz-raw://bc5dfaf0d04623829bd49d00de73c3522b5c17a7a57eb13eb6e6307ff2a71eeb",
        "dweb:/ipfs/QmSp1e1yB4rh5JYFVahUneC9Qh6rpiGioqX5aheiKSEPNo"
      ]
    },
    "test/mocks/ERC721Recipient.sol": {
      "keccak256": "0xd7f91819b73e02930082b81fb23ac91e2d8fa96f007476ba0839b605e82cbde1",
      "license": "MIT",
      "urls": [
        "bzz-raw://6a4627453bb1bfc523ae5ae43fc666a5989232e60411480c0588f5615ff59f77",
        "dweb:/ipfs/QmTdBuRPnYFgZ3o6XUCYfL3UZ8ymBuMheFSsLFu5gsZXWa"
      ]
    }
  },
  "version": 1
}