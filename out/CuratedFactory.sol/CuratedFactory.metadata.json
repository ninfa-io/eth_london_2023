{
  "compiler": {
    "version": "0.8.22+commit.4fc1097e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "master",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "instance",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "NewClone",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "previousAdminRole",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "newAdminRole",
            "type": "bytes32"
          }
        ],
        "name": "RoleAdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleGranted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleRevoked",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_instance",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "_salt",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "clone",
        "outputs": [
          {
            "internalType": "address",
            "name": "clone_",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_instance",
            "type": "address"
          }
        ],
        "name": "exists",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          }
        ],
        "name": "getRoleAdmin",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "grantRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "hasRole",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "renounceRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "revokeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_implementation",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "_isWhitelisted",
            "type": "bool"
          }
        ],
        "name": "setImplementation",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "custom:security-contact": "tech@ninfa.io                    *",
      "events": {
        "RoleAdminChanged(bytes32,bytes32,bytes32)": {
          "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
        },
        "RoleGranted(bytes32,address,address)": {
          "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
        },
        "RoleRevoked(bytes32,address,address)": {
          "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
        }
      },
      "kind": "dev",
      "methods": {
        "exists(address)": {
          "params": {
            "_instance": "address of the instance to check"
          }
        },
        "getRoleAdmin(bytes32)": {
          "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
        },
        "grantRole(bytes32,address)": {
          "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
        },
        "hasRole(bytes32,address)": {
          "details": "Returns `true` if `account` has been granted `role`."
        },
        "renounceRole(bytes32,address)": {
          "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
        },
        "revokeRole(bytes32,address)": {
          "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
        },
        "setImplementation(address,bool)": {
          "details": "external visibility because it is meant to be needed by all derived contracts, i.e. no point in having a public getter for it, to avoid extra code",
          "params": {
            "_implementation": "address of the master implementation to whitelist",
            "_isWhitelisted": "bool to set the implementation as whitelisted or not"
          }
        }
      },
      "stateVariables": {
        "CURATOR_ROLE": {
          "details": "CURATOR_ROLE is needed particularly for the curated factory derived contract, in order for already whitelisted minters (MINTER_ROLE), to be able to whitelist other minters, e.g. a gallery whitelisting artists, without having to pay in order to whitelist them, by using off-chain signatures and delegating the task to a backend service (using a CURATOR_ROLE private key). This minimizes security risks by not having to expose the admin private key to the backend service."
        },
        "MINTER_ROLE": {
          "details": "MINTER_ROLE is needed for deploying new instances of the whitelisted collections, it is equivalent to a whitelist of allowed deployers, it can be set by the CURATOR_ROLE or made payable by derived contracts"
        }
      },
      "title": "PayableFactory                                     *                                                           *",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "constructor": {
          "notice": "derived contracts require more than just an owner role, for security and usability reasons"
        },
        "exists(address)": {
          "notice": "needed by other contracts for access control, i.e. a marketplace like contract using this factory as a source of truth for whitelisted collections"
        },
        "setImplementation(address,bool)": {
          "notice": "whitelist or unwhitelist a master implementation"
        }
      },
      "notice": "Clone factory pattern contract                    *                                                           *",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/factory/CuratedFactory.sol": "CuratedFactory"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "inliner": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "peephole": true,
        "simpleCounterForLoopUncheckedIncrement": true,
        "yul": true,
        "yulDetails": {
          "optimizerSteps": "dhfoDgvulfnTUtnIf:fDnTOcmu",
          "stackAllocation": true
        }
      },
      "runs": 4194304
    },
    "remappings": [
      ":ds-test/=lib/solmate/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin/=lib/openzeppelin-contracts/contracts/",
      ":prb-test/=lib/prb-test/src/",
      ":solmate/=lib/solmate/src/",
      ":src/=contracts/",
      ":test/=test/"
    ],
    "viaIR": true
  },
  "sources": {
    "contracts/access/AccessControl.sol": {
      "keccak256": "0xcaf264cf4f9d26647567d0ce263af4ffd6d44e02369d0582ed589e9bbf29b52b",
      "license": "MIT",
      "urls": [
        "bzz-raw://be2cb37db3630c274b00dcf2ba92d486bec4e2b194d6b05bed2a3bdf93b23f7c",
        "dweb:/ipfs/QmSWu6r2kKuwnuEaqSD5LgwtHeGYPoKmqLiVCLC2SbmnP7"
      ]
    },
    "contracts/factory/CuratedFactory.sol": {
      "keccak256": "0x1389bbceb40a96deb89bcef20d2b70b7e09ca3e299dfa4556945690d3f5b7de0",
      "license": "MIT",
      "urls": [
        "bzz-raw://2e4227704838ed0300574692f1260b9b1fa0cbae6f0da01a416fb8d4925b535e",
        "dweb:/ipfs/QmNtUn9fxgf4PV5V4SKdzeo246yxccz2pSe69dSSwpc6qX"
      ]
    },
    "contracts/proxy/Clones.sol": {
      "keccak256": "0x81e4c8e99bf0e9833b0530e46ce391427c27bd2120e6cb77cf7424eca0ba47fa",
      "license": "MIT",
      "urls": [
        "bzz-raw://e83f71d45a8fd7a410eb523fe96f8604ada88d43657f2e3519377442c5e3e429",
        "dweb:/ipfs/QmY31k1oEUmLRvcGsTMLskHKt1DKS1J1fhc4uJhHcvw8Dp"
      ]
    }
  },
  "version": 1
}