{
  "compiler": {
    "version": "0.8.22+commit.4fc1097e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "factory_",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "approved",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "ApprovalForAll",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "previousAdminRole",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "newAdminRole",
            "type": "bytes32"
          }
        ],
        "name": "RoleAdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleGranted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleRevoked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes32[]",
            "name": "digests",
            "type": "bytes32[]"
          }
        ],
        "name": "VoidVouchers",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "burn",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "exists",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getApproved",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          }
        ],
        "name": "getRoleAdmin",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getRoyalties",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "bytes32",
                "name": "tokenURI",
                "type": "bytes32"
              },
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "endTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "salt",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "buyerAddress",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "ERC1271Account",
                "type": "address"
              },
              {
                "internalType": "uint16[]",
                "name": "royaltyBps",
                "type": "uint16[]"
              },
              {
                "internalType": "uint16[]",
                "name": "commissionBps",
                "type": "uint16[]"
              },
              {
                "internalType": "address[]",
                "name": "royaltyRecipients",
                "type": "address[]"
              },
              {
                "internalType": "address[]",
                "name": "commissionRecipients",
                "type": "address[]"
              }
            ],
            "internalType": "struct EncodeType.Voucher",
            "name": "_voucher",
            "type": "tuple"
          }
        ],
        "name": "getTypedDataDigest",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "_digest",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "grantRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "hasRole",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "isSecondaryMarket",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "bytes32",
                "name": "tokenURI",
                "type": "bytes32"
              },
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "endTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "salt",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "buyerAddress",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "ERC1271Account",
                "type": "address"
              },
              {
                "internalType": "uint16[]",
                "name": "royaltyBps",
                "type": "uint16[]"
              },
              {
                "internalType": "uint16[]",
                "name": "commissionBps",
                "type": "uint16[]"
              },
              {
                "internalType": "address[]",
                "name": "royaltyRecipients",
                "type": "address[]"
              },
              {
                "internalType": "address[]",
                "name": "commissionRecipients",
                "type": "address[]"
              }
            ],
            "internalType": "struct EncodeType.Voucher",
            "name": "_voucher",
            "type": "tuple"
          },
          {
            "internalType": "bytes",
            "name": "_signature",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          },
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "lazyBuy",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "bytes32",
                "name": "tokenURI",
                "type": "bytes32"
              },
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "endTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "salt",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "buyerAddress",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "ERC1271Account",
                "type": "address"
              },
              {
                "internalType": "uint16[]",
                "name": "royaltyBps",
                "type": "uint16[]"
              },
              {
                "internalType": "uint16[]",
                "name": "commissionBps",
                "type": "uint16[]"
              },
              {
                "internalType": "address[]",
                "name": "royaltyRecipients",
                "type": "address[]"
              },
              {
                "internalType": "address[]",
                "name": "commissionRecipients",
                "type": "address[]"
              }
            ],
            "internalType": "struct EncodeType.Voucher",
            "name": "_voucher",
            "type": "tuple"
          },
          {
            "internalType": "bytes",
            "name": "_signature",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          },
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "lazyMint",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "mint",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "ninfaRoyaltyInfo",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "recipients",
            "type": "address[]"
          },
          {
            "internalType": "uint16[]",
            "name": "bps",
            "type": "uint16[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "ownerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "renounceRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "revokeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "royaltyInfo",
        "outputs": [
          {
            "internalType": "address",
            "name": "recipient",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "baseURI_",
            "type": "string"
          }
        ],
        "name": "setBaseURI",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "internalType": "uint16[]",
            "name": "_royaltyBps",
            "type": "uint16[]"
          },
          {
            "internalType": "address[]",
            "name": "_royaltyRecipients",
            "type": "address[]"
          }
        ],
        "name": "setRoyaltyInfo",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_index",
            "type": "uint256"
          }
        ],
        "name": "tokenByIndex",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_index",
            "type": "uint256"
          }
        ],
        "name": "tokenOfOwnerByIndex",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32[]",
            "name": "_digests",
            "type": "bytes32[]"
          }
        ],
        "name": "voidVouchers",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "custom:security-contact": "tech@ninfa.io                    *",
      "details": "{ERC721} token                                       *                                                           *",
      "events": {
        "Approval(address,address,uint256)": {
          "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
        },
        "ApprovalForAll(address,address,bool)": {
          "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
        },
        "RoleAdminChanged(bytes32,bytes32,bytes32)": {
          "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
        },
        "RoleGranted(bytes32,address,address)": {
          "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
        },
        "RoleRevoked(bytes32,address,address)": {
          "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
        },
        "Transfer(address,address,uint256)": {
          "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
        }
      },
      "kind": "dev",
      "methods": {
        "balanceOf(address)": {
          "details": "WARNING this function SHOULD only be called by frontends due to unbound looppublic visibility as it is needed by"
        },
        "burn(uint256)": {
          "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
        },
        "exists(uint256)": {
          "details": "same function interface as erc1155, so that external contracts, i.e. the marketplace, can check either erc without requiring an if/else statement"
        },
        "getRoleAdmin(bytes32)": {
          "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
        },
        "grantRole(bytes32,address)": {
          "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
        },
        "hasRole(bytes32,address)": {
          "details": "Returns `true` if `account` has been granted `role`."
        },
        "initialize(bytes)": {
          "details": "Grants `DEFAULT_ADMIN_ROLE` and `MINTER_ROLE` to the account that deploys the contract.      `MINTER_ROLE` is needed in case the deployer may want to use or allow other accounts to mint on their self-sovereign collection"
        },
        "lazyBuy((bytes32,uint256,uint256,uint256,uint256,address,address,uint16[],uint16[],address[],address[]),bytes,bytes,address)": {
          "params": {
            "_voucher": ".value in this case is not the price of the token, but the tokenId"
          }
        },
        "lazyMint((bytes32,uint256,uint256,uint256,uint256,address,address,uint16[],uint16[],address[],address[]),bytes,bytes,address)": {
          "params": {
            "_data": "_data bytes are passed to `onErc1155Received` function if the `_to` address is a contract, for example a marketplace.      `onErc1155Received` is not being called on the minter's address when a new tokenId is minted however, even if it was contract.",
            "_to": "buyer, needed if using a external payment gateway, so that the minted tokenId value is sent to the address specified insead of `msg.sender`",
            "_voucher": "voucher struct containing the tokenId metadata."
          }
        },
        "mint(address,bytes)": {
          "details": "_tokenURI Replaces deprecated Openzeppelin contracts v4.0 `ERC721Metadata_URI` extension      See https://forum.openzeppelin.com/t/why-doesnt-openzeppelin-erc721-contain-settokenuri/6373 and https://forum.openzeppelin.com/t/function-settokenuri-in-erc721-is-gone-with-pragma-0-8-0/5978/2when minted for the first time, royalty recipient MUST be set to msg.sender, i.e. minter/artist;      royalty receipient cannot and SHOULD not be set to an address different than the minter's such as a payment splitter or else `setRoyaltyRecipient` function will revert when called (unless receiver )",
          "params": {
            "_data": "bytes should be in the following format/order: `abi.encodePacked(bytes32 _tokenURI, address [] memory _royaltyRecipients, uint16[] memory _royaltyBps`",
            "_to": "is not only the recipient, but also it is set as the address that will be used for access control when calling the `setRoyaltyInfo` function. Hence `_to` MUST be an address controlled by the artist/minter in order to prevent unauthorized changes to the royalty info."
          }
        },
        "renounceRole(bytes32,address)": {
          "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
        },
        "revokeRole(bytes32,address)": {
          "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "details": "See {IERC721-safeTransferFrom}."
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}. `supportsInterface()` was first implemented by all contracts and later all implementations removed, hardcoding interface IDs in order to save some gas and simplify the code."
        },
        "tokenByIndex(uint256)": {
          "details": "Throws if `_index` >= `totalSupply()`.",
          "params": {
            "_index": "A counter less than `totalSupply()`"
          },
          "returns": {
            "_0": "The token identifier for the `_index`th NFT,  (sort order not specified)"
          }
        },
        "totalSupply()": {
          "returns": {
            "_0": "A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address"
          }
        }
      },
      "stateVariables": {
        "MINTER_ROLE": {
          "details": "`MINTER_ROLE` is needed in case the deployer may want to use or allow other accounts to mint on their self-sovereign collection"
        },
        "_FACTORY": {
          "details": "constant set at deployment of master contract, replaces `initializer` modifier reducing the cost of calling `initialize` from the factory contract when a new clone is deployed."
        }
      },
      "title": "ERC721Sovereign                                     *                                                           *",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "tokenByIndex(uint256)": {
          "notice": "Enumerate valid NFTs"
        },
        "totalSupply()": {
          "notice": "Count NFTs tracked by this contract"
        }
      },
      "notice": "Self-sovereign ERC-721 minter preset               *                                                           *",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/token/ERC721/presets/ERC721Sovereign.sol": "ERC721Sovereign"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "inliner": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "peephole": true,
        "simpleCounterForLoopUncheckedIncrement": true,
        "yul": true,
        "yulDetails": {
          "optimizerSteps": "dhfoDgvulfnTUtnIf:fDnTOcmu",
          "stackAllocation": true
        }
      },
      "runs": 4194304
    },
    "remappings": [
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin/=lib/openzeppelin-contracts/contracts/",
      ":prb-test/=lib/prb-test/src/",
      ":solmate/=lib/solmate/src/",
      ":src/=contracts/",
      ":test/=test/"
    ],
    "viaIR": true
  },
  "sources": {
    "contracts/access/AccessControl.sol": {
      "keccak256": "0xcaf264cf4f9d26647567d0ce263af4ffd6d44e02369d0582ed589e9bbf29b52b",
      "license": "MIT",
      "urls": [
        "bzz-raw://be2cb37db3630c274b00dcf2ba92d486bec4e2b194d6b05bed2a3bdf93b23f7c",
        "dweb:/ipfs/QmSWu6r2kKuwnuEaqSD5LgwtHeGYPoKmqLiVCLC2SbmnP7"
      ]
    },
    "contracts/token/ERC721/ERC721.sol": {
      "keccak256": "0x56ab5e1b6a8a1dead3589eee655576a9eed0c139663ff01917da5c10dbe62bbd",
      "license": "MIT",
      "urls": [
        "bzz-raw://6937ae4422ad911c7d15dcc35932928251286fd4fc68358c6cca9e83a77189c4",
        "dweb:/ipfs/QmYUh1fE114R1byhFMRg4UndQ3KAoyfYjpJi5ewqj1y1ma"
      ]
    },
    "contracts/token/ERC721/IERC721Receiver.sol": {
      "keccak256": "0xfa2d4e7ae4084ba16e2608caea4e2dfc0da8a8c253c291fd8678ef38470c4f74",
      "license": "MIT",
      "urls": [
        "bzz-raw://c1c752b7fd111af4b895b6b39e0cb7f2271203afcec1ea31a294e2f8a3149a83",
        "dweb:/ipfs/QmZGRRr84qBs2MJQcaudNgbaeCn8XtiicQqyuwD9yBe8h6"
      ]
    },
    "contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "keccak256": "0x8eb1424715f384ccbed760b96cf49c716a9f644d3161fb7eb7ec58d76861d9a6",
      "license": "MIT",
      "urls": [
        "bzz-raw://13fd4c6856abe659c029b27593765d01bb3e0a56728cade269712073d5862455",
        "dweb:/ipfs/QmYq68h1tJArzRjU2C8XLAap5dSiNEWFwhB4yyKVy2gbbR"
      ]
    },
    "contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "keccak256": "0xa05d54dc4a124da4f5f23bab5a493aacf5af88823d961a0840193c1a7b314d03",
      "license": "MIT",
      "urls": [
        "bzz-raw://96fc52ad89fbc209d82ac5d3880fc364798d3d62ae1e13ceac382385c38cdc44",
        "dweb:/ipfs/QmQBRn8BW5qVUhKAL83TTbVbaAdi6YKjSi6MFr8knnRTnP"
      ]
    },
    "contracts/token/ERC721/extensions/ERC721Metadata_URI.sol": {
      "keccak256": "0xbaa67b8cf04df765f33f7a9db95b6139bf74d9f019d983931c68a28ae4d76af3",
      "license": "MIT",
      "urls": [
        "bzz-raw://02ebd857c4b277bf6773f691d9ed8949e7ae5a42fffb024d3d3b0b144b721b41",
        "dweb:/ipfs/QmQZZEEuWMMxtbtahSAVrvm6JHpcDzrevFfmGXdfvHJtqc"
      ]
    },
    "contracts/token/ERC721/extensions/ERC721Royalties.sol": {
      "keccak256": "0x352420aa12deeec0d70654458f08ccb58f15105d12828018475aa580ff0f2a01",
      "license": "MIT",
      "urls": [
        "bzz-raw://4005b59019c9d7e8f06a6ae8cd1c1b618c5da59a1a92116cb69a3af8465f0306",
        "dweb:/ipfs/QmPYmSegaKLFKHC8QmDdzLTggvpiaJV5qxYLXpu3apqWbS"
      ]
    },
    "contracts/token/ERC721/presets/ERC721Sovereign.sol": {
      "keccak256": "0xca0d199125a948b5ca668e326da4d1d43e90e5e44574eca7ab7a8a7a4422f7d1",
      "license": "MIT",
      "urls": [
        "bzz-raw://728bfea4509d20066334d42cc0acb3bf9269d4a3e7581744264f83923e5ca5af",
        "dweb:/ipfs/QmR4Q8yL2dmGkWF5scPwpJEVbpcpD7BzST3TEBZcjiequJ"
      ]
    },
    "contracts/token/common/DecodeTokenURI.sol": {
      "keccak256": "0x94290c9d8b146ecdf51ef8d06abe343d5702616e47162ef116351c7495e84c02",
      "license": "MIT",
      "urls": [
        "bzz-raw://f2a10edf2fd35ae1e2565de1ef4cb89c44a16c4fe46ca56a4dcb457b0ebef4f5",
        "dweb:/ipfs/QmRwfsffDfkdHiHqfR9DddgY2AchvvQD2uezdfgPpHC5pr"
      ]
    },
    "contracts/token/common/ERC2981.sol": {
      "keccak256": "0x6984aefb2ce8c5637f7cdf8a352a78f9f87ed9ded599187c4ece8ff34cc231a1",
      "license": "MIT",
      "urls": [
        "bzz-raw://275d02a60d5e08f7e95c0d4cbd03fc23327cd1d391de4589cf25670fc671ed4f",
        "dweb:/ipfs/QmdgCGFNk4CCiyBrVcoYms9KR443wDK5LC2YkJm77twNy8"
      ]
    },
    "contracts/token/common/ERC712.sol": {
      "keccak256": "0xd005cb995658f3e2ef283112ad9be22b565c8a9a257332413b01ea4621d0e40f",
      "license": "MIT",
      "urls": [
        "bzz-raw://01aeca036a9f595fda0a27242ab2015d1e775bf2912a42830178b57b72af85dc",
        "dweb:/ipfs/QmUvCfi2eorsDBJbA5k4azZfhmo6F725XgvRu7x977myWj"
      ]
    },
    "contracts/utils/Address.sol": {
      "keccak256": "0x8cd846c2836ec70de0117b60b99fab3057f6d52f69757c42ee247e5b70de9227",
      "license": "MIT",
      "urls": [
        "bzz-raw://40d2ee6f3f83cea1b24f8d744b291bae16a16d1f14a0688c260df13bcd61938a",
        "dweb:/ipfs/QmZqRgDrR6r8D3tghbtYJSD5uTgiQf6od3PTmnjAEwGNJe"
      ]
    },
    "contracts/utils/cryptography/ECDSA.sol": {
      "keccak256": "0xb739e54bef5daa5d5be886a0533002bd2d1ea1ac32cfc6f0c94d015a4448d48f",
      "license": "MIT",
      "urls": [
        "bzz-raw://ccad4fcf7316d54f137ccc229915c4d7c2dc0f98c7c3f5465cb69d033a44c56b",
        "dweb:/ipfs/QmSnUcKVJ2FXXGHSoN8QGdokHMkSzyCxhg5sxxHEK5etHt"
      ]
    },
    "contracts/utils/cryptography/SignatureChecker.sol": {
      "keccak256": "0x28d76bd6179311148fca09a9c8544d9e29e2656522f22e4aed0793da0f512ba4",
      "license": "MIT",
      "urls": [
        "bzz-raw://93e152bfab6f8617537438b8b045aea9a0a3eb97edfbcf69cb6611c7e0609bbb",
        "dweb:/ipfs/QmSYx4fp6qX8Aob8nPbWzqXyxkgtxPtkuQJ8SeqwQGwVKj"
      ]
    }
  },
  "version": 1
}